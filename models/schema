const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');


// Schema for Users.
const userSchema = new mongoose.Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    userType: { type: String, enum: ['regular', 'admin'], default: 'regular' },
    recipes: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Recipe' }]
});

userSchema.pre('save', async function(next) {
    if (this.isModified('password')) {
        this.password = await bcrypt.hash(this.password, 8);
    }
    next();
});

const User = mongoose.model('User', userSchema);


// Schema For Recipes.
const recipeSchema = new mongoose.Schema({
    title: { type: String, required: true },
    description: String,
    ingredients: [{ name: String, quantity: String }],
    steps: [String],
    cuisine: String,
    difficulty: { type: String, enum: ['easy', 'medium', 'hard'] },
    // images: [String],
    // ratings: [{ userId: mongoose.Schema.Types.ObjectId, rating: Number }],
    // reviews: [{ userId: mongoose.Schema.Types.ObjectId, review: String }],
    // createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    // createdAt: { type: Date, default: Date.now },
    updatedAt: Date
});

recipeSchema.pre('save', function(next) {
    this.updatedAt = Date.now();
    next();
});

const Recipe = mongoose.model('Recipe', recipeSchema);

module.exports = Recipe;


